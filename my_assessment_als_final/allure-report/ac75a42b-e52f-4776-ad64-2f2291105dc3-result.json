{"name": "Burger Menu reset app", "status": "failed", "statusDetails": {"message": "AssertionError: Button for adding to cart is not in the correct state\nassert 'Remove' == 'Add to cart'\n  - Add to cart\n  + Remove", "trace": "fixturefunc = <function products_availability at 0x0000023527B06A70>\nrequest = <FixtureRequest for <Function test_burger_menu_reset_app>>\nkwargs = {'browser': <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5ef585af94777aeae135467f80a47224\")>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nC:\\Python310\\lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5ef585af94777aeae135467f80a47224\")>\n\n    @then(parsers.parse('all displayed products are available for adding to cart'))\n    def products_availability(browser):\n        count = len(browser.find_elements(\n            By.XPATH, \"//div[contains(@class, 'inventory_list')]/div[contains(@class, 'inventory_item')]\"))\n        assert count > 0, 'No products available'\n        for i in range(0,count):\n            mynext = i + 1\n>           assert browser.find_element(\n                     By.XPATH,\"//div[contains(@class, 'inventory_list')]/div[\"+str(mynext)+\"]//button[contains(@class, 'btn_inventory')]\").text == \"Add to cart\" , \"Button for adding to cart is not in the correct state\"\nE           AssertionError: Button for adding to cart is not in the correct state\nE           assert 'Remove' == 'Add to cart'\nE             - Add to cart\nE             + Remove\n\ntests\\step_defs\\test_products_als.py:151: AssertionError"}, "steps": [{"name": "Given the products page is displayed", "status": "passed", "start": 1706473116355, "stop": 1706473142101}, {"name": "When i add all the displayed product to cart", "status": "passed", "start": 1706473142102, "stop": 1706473148561}, {"name": "When i select \"Reset App State\" from the burger Menu", "status": "passed", "start": 1706473148562, "stop": 1706473156754}, {"name": "Then i verify the shopping cart badge to be \"0\"", "status": "passed", "start": 1706473156755, "stop": 1706473166827}, {"name": "And all displayed products are available for adding to cart", "status": "failed", "statusDetails": {"message": "Button for adding to cart is not in the correct state\nassert 'Remove' == 'Add to cart'\n  - Add to cart\n  + Remove", "trace": "AssertionError: Button for adding to cart is not in the correct state\nassert 'Remove' == 'Add to cart'\n  - Add to cart\n  + Remove\n"}, "start": 1706473166828, "stop": 1706473166856}], "start": 1706473116354, "stop": 1706473166856, "uuid": "4b51cfe7-7931-47af-8b5e-cea74010e4c8", "historyId": "4b51cfe7793147af8b5ecea74010e4c8", "fullName": "features\\products_als.feature:Burger Menu reset app", "labels": [{"name": "host", "value": "DESKTOP-8K25EIC"}, {"name": "thread", "value": "12424-MainThread"}, {"name": "framework", "value": "pytest-bdd"}, {"name": "language", "value": "cpython3"}, {"name": "feature", "value": "Test case 002"}]}